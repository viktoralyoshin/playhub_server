// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String?
  email         String         @unique
  password      String
  level         Int            @default(1)
  role          String?        @default("user")
  createdAt     DateTime       @default(now())
  avatar        String?
  favoriteGames FavoriteGame[]
  Review        Review[]
}

model FavoriteGame {
  id     Int     @id @default(autoincrement())
  name   String?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Picture {
  id     Int     @id @default(autoincrement())
  src    String?
  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?
}

model Game {
  id           String      @id @default(uuid())
  name         String?     @unique
  developer    String?
  releaseDate  String?
  price        String?     @default("0")
  cover        String?
  genre        String?
  platform     String?
  pic          Picture[]
  description  String?
  reviews      Review[]
  mark         Int?        @default(0)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  mark      Int?
  title     String?
  text      String?
  createdAt DateTime @default(now())
  game      Game?    @relation(fields: [gameId], references: [id])
  gameId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Collection {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  games       Game[]
}
